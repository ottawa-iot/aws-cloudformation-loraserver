{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Template to Deploy LoRa Network, Gateway, and App Server in EC2",
   "Parameters":{
      "InstanceName":{
         "Type":"String",
         "Description":"Instance identifier for EC2 Console",
         "MinLength": "1",
         "ConstraintDescription": "Provide an identifier for artifacts."
      },
      "HostedZone":{
         "Type":"String",
         "Default" : "lp-wan.io.",
         "Description": "Provide Hosted Zone for DNS Record",
         "AllowedValues": ["lp-wan.io.","lp-wan.com."]
      },
      "DomainName":{
         "Type":"String",
         "Description":"Provide Domain Name for server (this is appended to Hosted Zone)",
         "MinLength": "1",
         "ConstraintDescription": "Domain name must be provided."
      },
      "InstanceType":{
         "Description":"EC2 Instance Type",
         "Type":"String",
         "Default":"t2.micro",
         "AllowedValues":[
            "t2.micro",
            "t2.small"
         ]
      },
      "KeyPair":{
         "Type":"AWS::EC2::KeyPair::KeyName"
      },
      "Bucket":{
         "Type":"String",
         "Description":"S3 bucket with Install Artifacts",
         "MinLength": "1",
         "Default":"lora-artifacts",
         "ConstraintDescription": "Bucket must be provided."
      }
   },
   "Metadata" : {
      "AWS::CloudFormation::Interface" : {
        "ParameterGroups" : [
          {
            "Label" : { "default":"Instance Configuration" },
            "Parameters" : [ "InstanceName","InstanceType", "KeyPair", "Bucket" ]
          },
          {
            "Label" : { "default" : "DNS Configuration" },
            "Parameters" : [ "HostedZone", "DomainName" ]
          }
        ],
      	"ParameterLabels" : {
      		"InstanceType" : { "default" : "Instance Type" },
      		"InstanceName" : { "default" : "Instance Name" },
      		"HostedZone" : { "default" : "Hosted Zone Name" },
      		"DomainName" : { "default" : "Server DNS Name" },
      		"Bucket" : { "default" : "S3 Install Artifacts" }
      	}
      }
    },
    "Mappings" : {
      "RegionMap" : {
        "us-east-1" : { 
          "role" : "loraserver-admin",
          "vpcId" : "vpc-4b6dcc2c",
          "subnet" : "subnet-e34a7495",
          "securityGroup" : "sg-8c8c10f7",
          "ami" : "ami-08111162"
        },
        "ca-central-1" : { 
          "role" : "loraserver-admin",
          "vpcId" : "vpc-647a8b0d",
          "subnet" : "subnet-8653afef",
          "securityGroup" : "sg-ef26de86",
          "ami" : "ami-eb20928f"
        }
      }
    },
   "Resources":{
     "ServerInstance" : {
       "Type" : "AWS::EC2::Instance",
       "Properties" : {
         "InstanceType" : { "Ref" : "InstanceType"} ,
         "IamInstanceProfile" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "role" ] },
         "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ami" ] },
         "KeyName" : { "Ref" : "KeyPair"} ,
         "NetworkInterfaces": [ {
              "AssociatePublicIpAddress": true,
              "DeleteOnTermination": true,
              "DeviceIndex": "0",
              "SubnetId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "subnet" ] },
              "GroupSet": [ { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "securityGroup" ] } ]
          } ],
        "InstanceInitiatedShutdownBehavior" : "stop",
        "Tags": [ 
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", [{ "Ref" : "AWS::StackName" }, { "Ref": "InstanceName" }]]} },
          { "Key": "Application", "Value": "LoRa Network" }
         ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash \n",
                "cd /home/ec2-user \n",
                "mkdir lora-install \n",
                "bucket=", { "Ref" : "Bucket" }, "\n",
                "echo 'Starting Lora Server Install' >> /home/ec2-user/install.log \n",
                "echo \"Copy install artifacts from $bucket\" >> /home/ec2-user/install.log \n",
                
                "echo \"Download from s3://$bucket to lora-install\" >> /home/ec2-user/install.log \n",
                "location=$(aws s3api get-bucket-location --bucket $bucket) \n",
                "echo \"Region for bucket $bucket is $location\" >> /home/ec2-user/install.log \n",
                "regionString=", { "Ref" : "AWS::Region" }, " \n",
                "echo \"Region is ${regionString}\" >> /home/ec2-user/install.log \n",
                "s3cmd=\"\" \n",
                "if [ \"${regionString}\" == \"ca-central-1\" ]; then \n",
                "    s3cmd=\"aws s3 cp s3://${bucket} lora-install --recursive --region ${regionString}\" \n",
                "else \n",
	              "    s3cmd=\"aws s3 cp s3://${bucket} lora-install --recursive\" \n",
                "fi \n",
                "echo \"Running command ${s3cmd}\"  >> /home/ec2-user/install.log \n",
                "eval \"$s3cmd\" \n",
                
                "chmod +x lora-install/setup-scripts/*.sh \n",
                "chmod +x lora-install/* \n",
                "./lora-install/setup-scripts/postgres-install-cf.sh \n",
                "./lora-install/setup-scripts/redis-install-cf.sh \n",
                "./lora-install/setup-scripts/mosquitto-install-cf.sh \n",
                "./lora-install/setup-scripts/lora-gateway-server-install-cf.sh \n",
                "./lora-install/setup-scripts/lora-app-server-install-cf.sh \n",
                "./lora-install/setup-scripts/lora-network-server-install-cf.sh \n",   

                "cname=", {"Ref" : "DomainName"}, "\n",
                "zoneId=", {"Ref" : "HostedZone"}, "\n",
                "cname=\"$cname.\"\n",
                "echo \"Setting hostname to $cname$zoneId\" >> /home/ec2-user/install.log \n",
                "hostname $cname$zoneId \n",

                "echo 'Complete Lora Server Install' >> /home/ec2-user/install.log "
              ]
            ]
          }
        }
       }
     },
    "ServerDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneName" : { "Ref" : "HostedZone" },
         "Comment" : "DNS record for LoRa Server Instance.",  
         "Name" : { "Fn::Join" : [ ".", [ { "Ref" : "DomainName" }, { "Ref" : "HostedZone" } ] ] },
         "Type" : "A",
         "TTL" : "60",
         "ResourceRecords" : [ { "Fn::GetAtt" : [ "ServerInstance", "PublicIp" ] } ]
      }
    }
   },
   "Outputs": {
    "InstanceID" : {
     "Description": "The EC2 Instance ID",
     "Value" : { "Ref" : "ServerInstance" }
  	},
    "ServerDNS" : {
      "Description": "Server DNS Record",
      "Value": { "Fn::Join" : [ ".", [ { "Ref" : "DomainName" }, { "Ref" : "HostedZone" } ] ] }
    },
    "PublicIP": {
      "Description": "Public IP address of the EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "ServerInstance",
          "PublicIp"
        ]
      }
    },
    "AmazonPublicDNS": {
      "Description": "Amazon DNS of the EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "ServerInstance",
          "PublicDnsName"
        ]
      }
    }
  }
}